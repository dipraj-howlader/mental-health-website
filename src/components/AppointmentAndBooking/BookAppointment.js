import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Button, Form, Modal } from 'react-bootstrap';
import { useLocation, useNavigate } from 'react-router-dom';
import { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';
import jsPDF from 'jspdf';

const BookAppointment = () => {
  const [selectedProfessional, setSelectedProfessional] = useState(null);
  const [patientName, setPatientName] = useState('');
  const [patientAge, setPatientAge] = useState('');
  const [mobileNumber, setMobileNumber] = useState('');
  const [appointmentDate, setAppointmentDate] = useState('');
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [showFailureModal, setShowFailureModal] = useState(false);
  const stripe = useStripe();
  const elements = useElements();
  const location = useLocation();
  const navigate = useNavigate();

  useEffect(() => {
    if (location.state && location.state.professionalData) {
      setSelectedProfessional(location.state.professionalData);
    }
  }, [location.state]);

  const handleConfirmAppointment = async () => {
    if (!stripe || !elements) {
      // Stripe.js has not loaded yet.
      return;
    }

    // Create a PaymentMethod using the card element.
    const cardElement = elements.getElement(CardElement);

    const { token, error } = await stripe.createToken(cardElement);

    if (error) {
      console.error(error);
  
      // Show failure modal in case of an error
      setShowFailureModal(true);
    } else {
      // Generate PDF content
      const pdfContent = `
        Safental.Com
        Dumki, Patuakhali
        -----------------------
  
        Appointment Details
        -----------------------
  
        Doctor Information:
        Name: ${selectedProfessional.name}
        Specialist: ${selectedProfessional.specialist}
  
        Patient Information:
        Name: ${patientName}
        Appointment Date: ${appointmentDate}
        Mobile Number: ${mobileNumber}
  
        Barcode Scanner: [Scan Barcode Here]
  
        This copy is generated by Safental.Com
      `;
  
      // Generate PDF using jsPDF
      const pdf = new jsPDF();
      pdf.setTextColor(0, 0, 0); // Black color
      pdf.setFontSize(20);
      pdf.text('Safental.Com', pdf.internal.pageSize.getWidth() / 2, 20, 'center');
      pdf.setFontSize(12);
      pdf.text('Dumki, Patuakhali', pdf.internal.pageSize.getWidth() / 2, 30, 'center');
  
      pdf.setLineWidth(0.5);
      pdf.line(20, 35, pdf.internal.pageSize.getWidth() - 20, 35);
  
      pdf.setFontSize(16);
      pdf.text('Appointment Details', pdf.internal.pageSize.getWidth() / 2, 50, 'center');
  
      pdf.setFontSize(12);
  
      // Left side (Doctor Information)
      pdf.text('Doctor Information:', 30, 60);
      pdf.text(`Name: ${selectedProfessional.name}`, 30, 70);
      pdf.text(`Specialist: ${selectedProfessional.specialist}`, 30, 80);
  
      // Right side (Patient Information)
      pdf.text('Patient Information:', pdf.internal.pageSize.getWidth() / 2 + 30, 60);
      pdf.text(`Name: ${patientName}`, pdf.internal.pageSize.getWidth() / 2 + 30, 70);
      pdf.text(`Appointment Date: ${appointmentDate}`, pdf.internal.pageSize.getWidth() / 2 + 30, 80);
      pdf.text(`Mobile Number: ${mobileNumber}`, pdf.internal.pageSize.getWidth() / 2 + 30, 90);
  
  
      // Footer
      pdf.text('This copy is generated by Safental.Com', pdf.internal.pageSize.getWidth() / 2, 150, 'center');
      pdf.text('Developed By Dipraj Howlader', pdf.internal.pageSize.getWidth() / 2, 170, 'center');
  
      // Save the PDF file
      pdf.save('AppointmentConfirmation.pdf');
  
      // Show success modal
      setShowSuccessModal(true);
    }
  };

  const handleBackToMainMenu = () => {
    // Redirect to the main menu or home page
    navigate('/');
  };

  return (
    <Container className="book-appointment-container">
      <h1 className="text-center mb-4">Confirm Your Appointment</h1>

      <Row className="justify-content-md-center">
        <Col md={6}>
          {selectedProfessional && (
            <Card>
              <Card.Body>
                <Card.Title>{selectedProfessional.name}</Card.Title>
                <Card.Subtitle className="mb-2 text-muted">{selectedProfessional.specialist}</Card.Subtitle>
                <Card.Text>
                  <strong>Appointment Fee:</strong> ${selectedProfessional.fee}
                </Card.Text>

                {/* Patient Details Form */}
                <Form>
                  <Form.Group controlId="patientName">
                    <Form.Label>Patient Name</Form.Label>
                    <Form.Control
                      type="text"
                      placeholder="Enter your name"
                      value={patientName}
                      onChange={(e) => setPatientName(e.target.value)}
                      required
                    />
                  </Form.Group>

                  <Form.Group controlId="patientAge">
                    <Form.Label>Patient Age</Form.Label>
                    <Form.Control
                      type="number"
                      placeholder="Enter your age"
                      value={patientAge}
                      onChange={(e) => setPatientAge(e.target.value)}
                      required
                    />
                  </Form.Group>

                  <Form.Group controlId="mobileNumber">
                    <Form.Label>Mobile Number</Form.Label>
                    <Form.Control
                      type="tel"
                      placeholder="Enter your mobile number"
                      value={mobileNumber}
                      onChange={(e) => setMobileNumber(e.target.value)}
                      required
                    />
                  </Form.Group>

                  <Form.Group controlId="appointmentDate">
                    <Form.Label>Date of Appointment</Form.Label>
                    <Form.Control
                      type="date"
                      value={appointmentDate}
                      onChange={(e) => setAppointmentDate(e.target.value)}
                      required
                    />
                  </Form.Group>

                  {/* Payment Form */}
                  <Form.Group controlId="cardNumber">
                    <Form.Label>Card Number</Form.Label>
                    <CardElement options={{ style: { base: { fontSize: '16px' } } }} />
                  </Form.Group>

                  <Button style={{marginTop:"15px"}} variant="primary" onClick={handleConfirmAppointment}>
                    Confirm Booking
                  </Button>
                </Form>
              </Card.Body>
            </Card>
          )}
        </Col>
      </Row>

      {/* Success Modal */}
      <Modal show={showSuccessModal} onHide={() => setShowSuccessModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Payment Successful</Modal.Title>
        </Modal.Header>
        <Modal.Body>Your payment was successful! Thank you for booking with us.</Modal.Body>
        <Modal.Footer>
          <Button variant="primary" onClick={handleBackToMainMenu}>
            Back to Main Menu
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Failure Modal */}
      <Modal show={showFailureModal} onHide={() => setShowFailureModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Payment Failure</Modal.Title>
        </Modal.Header>
        <Modal.Body>There was an error processing your payment. Please try again or contact support.</Modal.Body>
        <Modal.Footer>
          <Button variant="primary" onClick={() => setShowFailureModal(false)}>
            Close
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default BookAppointment;
